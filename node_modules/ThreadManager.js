module.exports = function(){
	ThreadManager=new Object()
	ThreadManager.list=[];
	ThreadManager.register=function(/*[threadName, ]func[, ...args]*/){
		const date=new Date();
		const isNoName = typeof(arguments[0])=='function';
		const threadName = 'KakaoBotThread_'+(isNoName?"NoName":arguments[0])+'_'+date.toDateString()+'_'+date.toTimeString();
		const func = isNoName?arguments[0]:arguments[1];
		const args=Array.prototype.slice.call(arguments,isNoName ? 1 : 2);
		if(!(typeof(arguments[0])=='function'||typeof(arguments[1])=='function')) return false;
		var mThread=new java.lang.Thread(new java.lang.Runnable({
			run:function(){
				try{
					func.apply(null,args);					
				}catch(e){}
			}
		}), threadName);
		mThread.setDaemon(true);
		mThread.setPriority(4);
		ThreadManager.list.push(mThread)
		return mThread;
	}
	ThreadManager.interrupt=function(){
		for(var i=0; i<ThreadManager.list.length;i++){
			ThreadManager.list[i].interrupt();
		}
		var numOfList=ThreadManager.list.length;
		ThreadManager.list=[];
		return numOfList;
	}	
	ThreadManager.interruptAll=function(){
		const threads=java.lang.Thread.getAllStackTraces().keySet().toArray();
		for(var i in threads){
			if(threads[i].name.includes("KakaoBotThread"))
				threads[i].interrupt();
		}
	}
	ThreadManager.getThreadList=function(){
		const threads=java.lang.Thread.getAllStackTraces().keySet().toArray();
		const tmpArray=new Array();
		for(var i in threads){
			if(threads[i].name.includes("KakaoBotThread"))
				tmpArray.unshift(threads[i]);
			else
				tmpArray.push(threads[i]);
		}
		return tmpArray.map((v)=>v.name);
	}
	
	ThreadManager.toString=()=>"ThreadManager";
	return ThreadManager;
}();